from Crypto.Util.number import long_to_bytes
from sympy import factorint, mod_inverse

n = 38851370026688292718610500714047313275568128923880406032240694321386868708669715834849444005885071039350867771015411960409482332075714895130040955721609469707712307896329759118786126795971608203356413095211390559788430050833157008379312765193252778797982267208761085870346676464332871683194405356959302337269
c = 10261077771725074705657914043269356567599143194523440913396849942218293691678585398731563393613698000832185314817454466653490727661933561044428403796426278758420015350118130960938311896749919783987826137481434137155805830348623564782373093651077789955010753791725635501759033479236281331100713235218526738970
e = 65537

factors = factorint(n)
p, q = factors.keys()
phi_n = (p - 1) * (q - 1)

d = mod_inverse(e, phi_n)
m = pow(c, d, n)

flag = long_to_bytes(m)
print(flag.decode('utf-8'))

# CURTIN_CTF{4_m4gn1fy1ng_gl455_w0n7_b3_n33d3d_for_sur3}